{
  "info": {
    "name": "TaskAPI",
    "description": "TaskAPI testing collection for managing tasks, time tracking, and reports. OTPs are sent via email (check spam/junk folder if not received) or SMS. Use baseUrl: https://taskapi-rtc7.onrender.com",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register (Email OTP)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\"email\": \"test@example.com\", \"password\": \"password123\", \"deliveryMethod\": \"email\"}"
            },
            "url": "{{baseUrl}}/api/auth/register",
            "description": "Register a user and send OTP via email. Check spam/junk folder if OTP email is not in inbox. Test OTP is 123456."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"User registered\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData).to.have.property(\"id\");",
                  "  pm.expect(jsonData.email).to.equal(\"test@example.com\");",
                  "  pm.expect(jsonData.message).to.equal(\"OTP sent\");",
                  "  pm.environment.set(\"userId\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register (Phone OTP)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\"email\": \"test2@example.com\", \"password\": \"password123\", \"phone\": \"+2341234567890\", \"deliveryMethod\": \"phone\"}"
            },
            "url": "{{baseUrl}}/api/auth/register",
            "description": "Register a user and send OTP via SMS."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"User registered\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData).to.have.property(\"id\");",
                  "  pm.expect(jsonData.email).to.equal(\"test2@example.com\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Verify OTP",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\"email\": \"test@example.com\", \"otp\": \"123456\"}"
            },
            "url": "{{baseUrl}}/api/auth/verify-otp",
            "description": "Verify OTP sent via email or SMS. For email, check spam/junk folder if not received. Test OTP is 123456."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"OTP verified\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData).to.have.property(\"token\");",
                  "  pm.expect(jsonData.message).to.equal(\"Account verified\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\"email\": \"test@example.com\", \"password\": \"password123\"}"
            },
            "url": "{{baseUrl}}/api/auth/login",
            "description": "Login to get JWT token."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Login successful\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData).to.have.property(\"token\");",
                  "  pm.environment.set(\"token\", jsonData.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login Admin",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\"email\": \"admin@example.com\", \"password\": \"admin123\"}"
            },
            "url": "{{baseUrl}}/api/auth/login",
            "description": "Login as admin to get admin JWT token."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Admin login successful\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData).to.have.property(\"token\");",
                  "  pm.environment.set(\"adminToken\", jsonData.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Tasks",
      "item": [
        {
          "name": "Create Task",
          "request": {
            "auth": { "type": "bearer", "bearer": [{ "key": "token", "value": "{{token}}" }] },
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"Test Task\", \"description\": \"Test description\", \"status\": \"pending\"}"
            },
            "url": "{{baseUrl}}/api/tasks",
            "description": "Create a new task."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Task created\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData).to.have.property(\"id\");",
                  "  pm.expect(jsonData.title).to.equal(\"Test Task\");",
                  "  pm.environment.set(\"taskId\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Tasks",
          "request": {
            "auth": { "type": "bearer", "bearer": [{ "key": "token", "value": "{{token}}" }] },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tasks?status=pending&page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"],
              "query": [
                { "key": "status", "value": "pending" },
                { "key": "page", "value": "1" },
                { "key": "limit", "value": "10" }
              ]
            },
            "description": "List tasks with pagination and status filter."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Tasks retrieved\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.tasks).to.be.an(\"array\");",
                  "  pm.expect(jsonData.total).to.be.a(\"number\");",
                  "  pm.expect(jsonData.page).to.equal(1);",
                  "  pm.expect(jsonData.limit).to.equal(10);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Task by ID",
          "request": {
            "auth": { "type": "bearer", "bearer": [{ "key": "token", "value": "{{token}}" }] },
            "method": "GET",
            "header": [],
            "url": "{{baseUrl}}/api/tasks/{{taskId}}",
            "description": "Get a task by ID."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Task retrieved\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.id).to.equal(parseInt(pm.environment.get(\"taskId\")));",
                  "  pm.expect(jsonData).to.have.property(\"title\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Task",
          "request": {
            "auth": { "type": "bearer", "bearer": [{ "key": "token", "value": "{{token}}" }] },
            "method": "PUT",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"Updated Task\", \"status\": \"in-progress\"}"
            },
            "url": "{{baseUrl}}/api/tasks/{{taskId}}",
            "description": "Update a task by ID."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Task updated\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.title).to.equal(\"Updated Task\");",
                  "  pm.expect(jsonData.status).to.equal(\"in-progress\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Task",
          "request": {
            "auth": { "type": "bearer", "bearer": [{ "key": "token", "value": "{{token}}" }] },
            "method": "DELETE",
            "header": [],
            "url": "{{baseUrl}}/api/tasks/{{taskId}}",
            "description": "Delete a task by ID."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", () => pm.response.to.have.status(204));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Task Logs",
      "item": [
        {
          "name": "Track Time",
          "request": {
            "auth": { "type": "bearer", "bearer": [{ "key": "token", "value": "{{token}}" }] },
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\"startTime\": \"2025-05-26T12:00:00Z\", \"endTime\": \"2025-05-26T13:00:00Z\"}"
            },
            "url": "{{baseUrl}}/api/tasks/{{taskId}}/time",
            "description": "Log time spent on a task."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Time logged\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.taskId).to.equal(parseInt(pm.environment.get(\"taskId\")));",
                  "  pm.expect(jsonData.duration).to.equal(3600);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Task Logs",
          "request": {
            "auth": { "type": "bearer", "bearer": [{ "key": "token", "value": "{{token}}" }] },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}/logs?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}", "logs"],
              "query": [
                { "key": "page", "value": "1" },
                { "key": "limit", "value": "10" }
              ]
            },
            "description": "List logs for a task with pagination."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Logs retrieved\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.logs).to.be.an(\"array\");",
                  "  pm.expect(jsonData.total).to.be.a(\"number\");",
                  "  pm.expect(jsonData.page).to.equal(1);",
                  "  pm.expect(jsonData.limit).to.equal(10);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Total Time",
          "request": {
            "auth": { "type": "bearer", "bearer": [{ "key": "token", "value": "{{token}}" }] },
            "method": "GET",
            "header": [],
            "url": "{{baseUrl}}/api/tasks/{{taskId}}/time-total",
            "description": "Get total time spent on a task."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Total time retrieved\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.taskId).to.equal(parseInt(pm.environment.get(\"taskId\")));",
                  "  pm.expect(jsonData.totalTime).to.be.a(\"number\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Reports",
      "item": [
        {
          "name": "Get Time Report",
          "request": {
            "auth": { "type": "bearer", "bearer": [{ "key": "token", "value": "{{token}}" }] },
            "method": "GET",
            "header": [],
            "url": "{{baseUrl}}/api/tasks/report/time",
            "description": "Get time report across all tasks."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Time report retrieved\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.logs).to.be.an(\"array\");",
                  "  pm.expect(jsonData.totalTime).to.be.a(\"number\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Completion Report (Admin)",
          "request": {
            "auth": { "type": "bearer", "bearer": [{ "key": "token", "value": "{{adminToken}}" }] },
            "method": "GET",
            "header": [],
            "url": "{{baseUrl}}/api/tasks/report/completion",
            "description": "Get task completion rate (admin only)."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Completion report retrieved\", () => {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.total).to.be.a(\"number\");",
                  "  pm.expect(jsonData.completed).to.be.a(\"number\");",
                  "  pm.expect(jsonData.rate).to.be.a(\"number\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    { "key": "baseUrl", "value": "https://taskapi-rtc7.onrender.com", "type": "string" }
  ]
}